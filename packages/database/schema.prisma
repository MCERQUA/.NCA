// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CONTRACTOR
  MEMBER
}

enum CompanyPlan {
  FREE
  PRO
  VERIFIED
}

enum CompanyStatus {
  ACTIVE
  PENDING
  HIDDEN
  SUSPENDED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  CLOSED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIALING
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          UserRole  @default(MEMBER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  companies     CompanyUser[]
  auditLogs     AuditLog[]

  @@index([email])
}

model Company {
  id               String        @id @default(cuid())
  slug             String        @unique
  name             String
  logoUrl          String?
  description      String?       @db.Text
  yearFounded      Int?
  phone            String?
  email            String?
  website          String?

  // Address
  address          String?
  city             String?
  state            String?
  zip              String?
  country          String        @default("US")

  // Geo
  latitude         Float?
  longitude        Float?
  serviceRadiusMi  Int?
  coverageAreas    String[]      // Array of cities/counties/ZIPs

  // Credentials
  licenses         Json[]        // Array of license objects
  certifications   String[]
  insuranceCarrier String?
  bondingCompany   String?

  // Status
  verified         Boolean       @default(false)
  plan             CompanyPlan   @default(FREE)
  status           CompanyStatus @default(PENDING)

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  users            CompanyUser[]
  services         Service[]
  projects         Project[]
  reviews          Review[]
  leads            Lead[]
  subscription     Subscription?
  faqs             FAQ[]

  @@index([slug])
  @@index([city, state])
  @@index([verified, status])
  @@index([plan])
}

model CompanyUser {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      String   @default("EDITOR") // OWNER, EDITOR, BILLING
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@index([companyId])
}

model ServiceCategory {
  id       String            @id @default(cuid())
  slug     String            @unique
  name     String
  parentId String?
  parent   ServiceCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children ServiceCategory[] @relation("CategoryHierarchy")
  services Service[]

  @@index([slug])
}

model Service {
  id          String          @id @default(cuid())
  companyId   String
  categoryId  String
  title       String
  description String?         @db.Text
  tags        String[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  company  Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  category ServiceCategory @relation(fields: [categoryId], references: [id])

  @@index([companyId])
  @@index([categoryId])
}

model Project {
  id          String   @id @default(cuid())
  companyId   String
  title       String
  description String?  @db.Text
  images      String[] // Array of image URLs
  city        String?
  state       String?
  date        DateTime?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model Review {
  id         String   @id @default(cuid())
  companyId  String
  rating     Int      // 1-5
  title      String?
  body       String?  @db.Text
  authorName String
  source     String   @default("first-party") // first-party | imported
  helpful    Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([rating])
  @@index([createdAt])
}

model FAQ {
  id        String   @id @default(cuid())
  companyId String
  question  String
  answer    String   @db.Text
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model Lead {
  id        String     @id @default(cuid())
  companyId String
  name      String
  email     String
  phone     String?
  message   String?    @db.Text
  utm       Json?      // UTM parameters
  status    LeadStatus @default(NEW)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([status])
  @@index([createdAt])
}

model Subscription {
  id               String             @id @default(cuid())
  companyId        String             @unique
  stripeCustomerId String             @unique
  plan             CompanyPlan
  status           SubscriptionStatus
  periodStart      DateTime
  periodEnd        DateTime
  cancelAtPeriodEnd Boolean           @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
  @@index([status])
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String
  action     String
  targetType String
  targetId   String
  meta       Json?
  createdAt  DateTime @default(now())

  actor User @relation(fields: [actorId], references: [id])

  @@index([actorId])
  @@index([targetType, targetId])
  @@index([createdAt])
}

model Resource {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  content     String   @db.Text
  excerpt     String?
  coverImage  String?
  category    String
  tags        String[]
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([published, publishedAt])
  @@index([category])
}
